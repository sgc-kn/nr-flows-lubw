[
    {
        "id": "e92a30bcc6a0047f",
        "type": "tab",
        "label": "LUBW [T Live]",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "77c0c8f18654550c",
        "type": "tab",
        "label": "LUBW [T Setup]",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5ef45f84a0404e21",
        "type": "tab",
        "label": "Environment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2af0b8669ed7a3f6",
        "type": "group",
        "z": "e92a30bcc6a0047f",
        "name": "Log raw data  urn:raw:lubw:konstanz:<sensor>",
        "style": {
            "fill": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "fba836079483735c",
            "57a493dae4b6a344",
            "ed09b3b57b93cca9",
            "10cdd2d0480f70c6",
            "6504e795eadb1c06",
            "bdee35b3a3b11cef"
        ],
        "x": 334,
        "y": 919,
        "w": 572,
        "h": 242
    },
    {
        "id": "16e81c92122c65b7",
        "type": "group",
        "z": "e92a30bcc6a0047f",
        "name": "Write normalized data  urn:sdm:AirQualityObserved:lubw:konstanz:<sensor>",
        "style": {
            "fill": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "90fb447f4db18b6e",
            "fd0a451e00e2e5d3",
            "80f9a4eb784fa5a2",
            "6301e51f816975aa",
            "5c842c2bbe1b578b",
            "bdebb3e54f40c9ea"
        ],
        "x": 334,
        "y": 639,
        "w": 572,
        "h": 222
    },
    {
        "id": "f4b09cd43f0f361f",
        "type": "group",
        "z": "e92a30bcc6a0047f",
        "name": "Get data since last sync",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "841ecdbe4db74f88",
            "a846a2bf3f8d12b5",
            "d6e2d12a9b4ca37d",
            "ec45649c0a8c89ca",
            "e62853720cf0fd15"
        ],
        "x": 48,
        "y": 119,
        "w": 1144,
        "h": 488
    },
    {
        "id": "dc11a833da7816df",
        "type": "group",
        "z": "77c0c8f18654550c",
        "name": "Database Table - AirQualityObserved",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "3ed39dfea1bcec72",
            "17bf151937c6a8f3",
            "f22ca1b0081c2126",
            "e050d224a69c5f67",
            "2a4cd8866b4b9d18",
            "b70fda7c2d04bd57",
            "1011bc6efbacb0c7",
            "1630bf7f0a2f22d0",
            "1d3623bc18a517d0"
        ],
        "x": 48,
        "y": 313,
        "w": 1218,
        "h": 248
    },
    {
        "id": "2d31311821583692",
        "type": "group",
        "z": "77c0c8f18654550c",
        "name": "Create Database Schema",
        "style": {
            "fill": "#ffC000",
            "label": true
        },
        "nodes": [
            "1fde0f9ee4fd3c20",
            "de835ae4058ab6a1",
            "4cc9d380ca29a365",
            "b3bb223d6e2e7259",
            "2425339b1ce6fd27",
            "8427e22217ba2f7f",
            "f00ece2082b314b4",
            "1a5c186f2d287dda",
            "b4c07bf5a4fd25ae"
        ],
        "x": 48,
        "y": 33,
        "w": 1218,
        "h": 248
    },
    {
        "id": "30400e35053c989e",
        "type": "group",
        "z": "77c0c8f18654550c",
        "name": "Database Table - Raw",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "9d67c680606f715a",
            "1ea1dc20f7fdd773",
            "5bb1780720af18bb",
            "8866113c9d6c473e",
            "62b1988c62ee2ac8",
            "0be5aa34ecfd6ea9",
            "f4ba38c07e4cfacd",
            "05a1feb1e14906f1",
            "14227ee915800d1f"
        ],
        "x": 48,
        "y": 573,
        "w": 1218,
        "h": 248
    },
    {
        "id": "841ecdbe4db74f88",
        "type": "group",
        "z": "e92a30bcc6a0047f",
        "g": "f4b09cd43f0f361f",
        "name": "Get data from LUBW",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "90d29909c092bfa9",
            "78977dd0a3aada20",
            "29ef1c8c80c15bcf",
            "0b898546cdc65084",
            "8a24358847535040",
            "5f12de4d286a02b5"
        ],
        "x": 74,
        "y": 419,
        "w": 892,
        "h": 162
    },
    {
        "id": "a846a2bf3f8d12b5",
        "type": "group",
        "z": "e92a30bcc6a0047f",
        "g": "f4b09cd43f0f361f",
        "name": "Get state (last observation date) from Quantum Leap",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "6fb92eeddce1cdc8",
            "42e8e5e34809adb7",
            "c8056dd4554de7bc",
            "ac3b651070897bf1",
            "cc9514770fba60dc"
        ],
        "x": 74,
        "y": 199,
        "w": 742,
        "h": 202
    },
    {
        "id": "2a4cd8866b4b9d18",
        "type": "group",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "b9553a1cdb5e15c9",
            "58771ea04a2073e4",
            "013fc7de7925c10e"
        ],
        "x": 74,
        "y": 339,
        "w": 572,
        "h": 142
    },
    {
        "id": "2425339b1ce6fd27",
        "type": "group",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "096777924f968aaf",
            "1bc1f6574915af03",
            "0f96b7915dc9db2f"
        ],
        "x": 74,
        "y": 59,
        "w": 572,
        "h": 142
    },
    {
        "id": "62b1988c62ee2ac8",
        "type": "group",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "e1da7cab7996779e",
            "67cd6cefa5a1f5cf",
            "c2ab6c53b0f8e476"
        ],
        "x": 74,
        "y": 599,
        "w": 572,
        "h": 142
    },
    {
        "id": "e62853720cf0fd15",
        "type": "group",
        "z": "e92a30bcc6a0047f",
        "g": "f4b09cd43f0f361f",
        "name": "What's the current state in the db?",
        "style": {
            "label": true,
            "fill": "#dbcbe7",
            "color": "#000000"
        },
        "nodes": [
            "c6d89b0d84f79c17",
            "186c4edbc2c472e2"
        ],
        "x": 874,
        "y": 199,
        "w": 292,
        "h": 142
    },
    {
        "id": "8b2b31feb537a97f",
        "type": "comment",
        "z": "e92a30bcc6a0047f",
        "name": "LUBW - Umweltmessstation",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "fba836079483735c",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "2af0b8669ed7a3f6",
        "name": "Build observations",
        "func": "let observations = [];\nlet now = new Date().toISOString();\n\nfor (const [sensor, response] of Object.entries(msg.payload)) {\n    for (const mw of response.messwerte) {\n        if (mw.wert == null) { continue }\n\n        let o = {}\n        o.entity_id = \"urn:raw:lubw:konstanz:\" + sensor \n        o.entity_type = \"raw_lubw\"\n\n        o.time_index = mw.startZeit\n        \n        o.dateprocessed = now\n\n        o.endzeit = mw.endZeit\n\n        o.startzeit =  mw.startZeit\n\n        o.wert =  mw.wert\n\n        o.station = response.station,\n        \n        o.komponente = response.komponente,\n        \n\n        observations.push(o)\n    }\n}\n\nreturn { payload : observations }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 960,
        "wires": [
            [
                "57a493dae4b6a344",
                "6504e795eadb1c06"
            ]
        ]
    },
    {
        "id": "57a493dae4b6a344",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "2af0b8669ed7a3f6",
        "name": "raw observations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "ed09b3b57b93cca9",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "2af0b8669ed7a3f6",
        "name": "request",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1040,
        "wires": []
    },
    {
        "id": "10cdd2d0480f70c6",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "2af0b8669ed7a3f6",
        "name": "response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 720,
        "y": 1120,
        "wires": []
    },
    {
        "id": "90fb447f4db18b6e",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "16e81c92122c65b7",
        "name": "Build standardized observations",
        "func": "let observations = []\n\nfunction point({lon, lat}) {\n    return `SRID=4326;POINT(${lon} ${lat})`\n}\n\nfunction getSensorReading(sensorType, value) {\n  const sensors = {\n    pm10: null,\n    no2: null,\n    o3: null,\n    pm25: null\n  };\n  \n  // Only update the sensor matching sensorType\n  if (sensors.hasOwnProperty(sensorType)) {\n    sensors[sensorType] = value;\n  }\n\n  return sensors;\n}\n\n\n\nfor (const [sensor, response] of Object.entries(msg.payload)) {\n    for (const mw of response.messwerte) {\n        if (mw.wert == null) { continue }\n\n        let o = {}\n        o.entity_id = \"urn:sdm:AirQualityObserved:lubw:konstanz:\" + sensor \n        o.entity_type = \"AirQualityObserved\"\n        o.time_index = mw.startZeit\n        o.dateprocessed =  new Date().toISOString(),\n        o.dateobserved =  mw.startZeit\n\n        o.location = point({ lat: 47.6952, lon: 9.1307 })\n\n        // this makes sure that all columns are there\n        const sensorReadings = getSensorReading(sensor, mw.wert)\n        for (const [sensorName, value] of Object.entries(sensorReadings)){\n            o[sensorName] = value\n        }\n\n        observations.push(o)\n    }\n}\n\nreturn { payload : observations }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "fd0a451e00e2e5d3",
                "80f9a4eb784fa5a2"
            ]
        ]
    },
    {
        "id": "fd0a451e00e2e5d3",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "16e81c92122c65b7",
        "name": "observations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 680,
        "wires": []
    },
    {
        "id": "90d29909c092bfa9",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "841ecdbe4db74f88",
        "name": "prepare get",
        "func": "let lubw_sensor = msg.sensor_lubw;\nlet von = msg.lastobs;\nvon.setHours(von.getHours() + 1);\nvon = von.toISOString();\nlet bis = new Date();\nbis.setHours(bis.getHours() + 1);\nbis.setMinutes(0);\nbis.setSeconds(0);\nbis.setMilliseconds(0);\nbis = bis.toISOString()\n\nmsg.url = `https://mersyzentrale.lubw.de/www/Datenweitergabe/Konstanz/data.php?komponente=${lubw_sensor}&von=${von}&bis=${bis}`;\n\nmsg.headers = {};\nmsg.headers[\"Accept\"] = \"application/json\"\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 460,
        "wires": [
            [
                "78977dd0a3aada20"
            ]
        ]
    },
    {
        "id": "78977dd0a3aada20",
        "type": "http request",
        "z": "e92a30bcc6a0047f",
        "g": "841ecdbe4db74f88",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "5f12de4d286a02b5"
            ]
        ]
    },
    {
        "id": "29ef1c8c80c15bcf",
        "type": "join",
        "z": "e92a30bcc6a0047f",
        "g": "841ecdbe4db74f88",
        "name": "join: <sensor>",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "sensor",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 180,
        "y": 540,
        "wires": [
            [
                "90fb447f4db18b6e",
                "fba836079483735c"
            ]
        ]
    },
    {
        "id": "0b898546cdc65084",
        "type": "comment",
        "z": "e92a30bcc6a0047f",
        "g": "841ecdbe4db74f88",
        "name": "Basic/Digest Auth mit LUBW Zugangsdaten setzen!",
        "info": "",
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "8a24358847535040",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "841ecdbe4db74f88",
        "name": "lubw error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 540,
        "wires": []
    },
    {
        "id": "5f12de4d286a02b5",
        "type": "switch",
        "z": "e92a30bcc6a0047f",
        "g": "841ecdbe4db74f88",
        "name": "if ok",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "300",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 520,
        "wires": [
            [
                "29ef1c8c80c15bcf"
            ],
            [
                "8a24358847535040"
            ]
        ]
    },
    {
        "id": "6fb92eeddce1cdc8",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "a846a2bf3f8d12b5",
        "name": "lastobs",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "lastobs",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "42e8e5e34809adb7",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "a846a2bf3f8d12b5",
        "name": "last observation",
        "func": "var inputTime;\n\nif (msg.payload.length == 0) {\n    // if there are no values, get last 4 hours\n    inputTime = new Date();    \n    inputTime.setHours(inputTime.getHours() - 4)\n} else {\n    // If time_index is provided, use it\n    inputTime = new Date(msg.payload[0]?.time_index); // UTC Time  \n}\n\nmsg.lastobs = inputTime\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 360,
        "wires": [
            [
                "6fb92eeddce1cdc8",
                "90d29909c092bfa9"
            ]
        ]
    },
    {
        "id": "c8056dd4554de7bc",
        "type": "change",
        "z": "e92a30bcc6a0047f",
        "g": "a846a2bf3f8d12b5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sensor_lubw",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 240,
        "wires": [
            [
                "c6d89b0d84f79c17"
            ]
        ]
    },
    {
        "id": "ac3b651070897bf1",
        "type": "change",
        "z": "e92a30bcc6a0047f",
        "g": "a846a2bf3f8d12b5",
        "name": "split setup: <sensor>",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.pm10",
                "pt": "msg",
                "to": "PM10",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.pm25",
                "pt": "msg",
                "to": "PM2,5",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.o3",
                "pt": "msg",
                "to": "O3",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.no2",
                "pt": "msg",
                "to": "NO2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 240,
        "wires": [
            [
                "cc9514770fba60dc"
            ]
        ]
    },
    {
        "id": "cc9514770fba60dc",
        "type": "split",
        "z": "e92a30bcc6a0047f",
        "g": "a846a2bf3f8d12b5",
        "name": "split: <sensor>",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "sensor",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "c8056dd4554de7bc"
            ]
        ]
    },
    {
        "id": "ec45649c0a8c89ca",
        "type": "comment",
        "z": "e92a30bcc6a0047f",
        "g": "f4b09cd43f0f361f",
        "name": "New values are ready about 15 minutes after the interval has passed",
        "info": "",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "c6d89b0d84f79c17",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "e62853720cf0fd15",
        "name": "configure PostGresT request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nconst dataspace = env.get('FIWARE_SERVICE');\n\nmsg.table = \"etraw_lubw\"\n\nconst entity_id = \"urn:raw:lubw:konstanz:\" + msg.sensor\n\nmsg.url = `${postgrest}/${msg.table}?order=time_index.desc&entity_id=eq.${entity_id}&limit=1`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n    \"Accept-Profile\": `postgrest_${dataspace}`,    \n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "186c4edbc2c472e2"
            ]
        ]
    },
    {
        "id": "186c4edbc2c472e2",
        "type": "http request",
        "z": "e92a30bcc6a0047f",
        "g": "e62853720cf0fd15",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "42e8e5e34809adb7"
            ]
        ]
    },
    {
        "id": "80f9a4eb784fa5a2",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "16e81c92122c65b7",
        "name": "configure PostGresT request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nconst dataspace = env.get('FIWARE_SERVICE');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/etairqualityobserved`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n    \"Content-Profile\": `postgrest_${dataspace}`,    \n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 760,
        "wires": [
            [
                "5c842c2bbe1b578b",
                "6301e51f816975aa"
            ]
        ]
    },
    {
        "id": "6301e51f816975aa",
        "type": "http request",
        "z": "e92a30bcc6a0047f",
        "g": "16e81c92122c65b7",
        "name": "POST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 820,
        "wires": [
            [
                "bdebb3e54f40c9ea"
            ]
        ]
    },
    {
        "id": "5c842c2bbe1b578b",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "16e81c92122c65b7",
        "name": "request",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 760,
        "wires": []
    },
    {
        "id": "bdebb3e54f40c9ea",
        "type": "debug",
        "z": "e92a30bcc6a0047f",
        "g": "16e81c92122c65b7",
        "name": "response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "statusCode",
        "statusType": "msg",
        "x": 780,
        "y": 820,
        "wires": []
    },
    {
        "id": "6504e795eadb1c06",
        "type": "function",
        "z": "e92a30bcc6a0047f",
        "g": "2af0b8669ed7a3f6",
        "name": "configure PostGresT request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nconst dataspace = env.get('FIWARE_SERVICE');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/etraw_lubw`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n    \"Content-Profile\": `postgrest_${dataspace}`,    \n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1040,
        "wires": [
            [
                "bdee35b3a3b11cef",
                "ed09b3b57b93cca9"
            ]
        ]
    },
    {
        "id": "bdee35b3a3b11cef",
        "type": "http request",
        "z": "e92a30bcc6a0047f",
        "g": "2af0b8669ed7a3f6",
        "name": "POST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1120,
        "wires": [
            [
                "10cdd2d0480f70c6"
            ]
        ]
    },
    {
        "id": "d6e2d12a9b4ca37d",
        "type": "cronplus",
        "z": "e92a30bcc6a0047f",
        "g": "f4b09cd43f0f361f",
        "name": "cron: at 20 minutes past the hour",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule",
                "topic": "_",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "20 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 240,
        "y": 160,
        "wires": [
            [
                "ac3b651070897bf1"
            ]
        ]
    },
    {
        "id": "3ed39dfea1bcec72",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "const dataspace = env.get('FIWARE_SERVICE');\n\nmsg.payload = {statements: []};\nmsg.payload.statements[0] = `\nCREATE TABLE postgrest_${dataspace}.etairqualityobserved (\n    entity_id text,\n    entity_type text,\n    time_index timestamp with time zone NOT NULL,\n    dateprocessed timestamp with time zone,\n    dateobserved timestamp with time zone,\n    location geometry,\n    pm10 double precision,\n    no2 double precision,\n    o3 double precision,\n    pm25 double precision\n)\n`;\n\nmsg.payload.statements[1] = `SELECT create_hypertable('postgrest_${dataspace}.etairqualityobserved', 'time_index')`;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "17bf151937c6a8f3"
            ]
        ]
    },
    {
        "id": "17bf151937c6a8f3",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/execute_many`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 380,
        "wires": [
            [
                "f22ca1b0081c2126",
                "b70fda7c2d04bd57"
            ]
        ]
    },
    {
        "id": "f22ca1b0081c2126",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "Exec Statement",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "e050d224a69c5f67",
        "type": "inject",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "3ed39dfea1bcec72"
            ]
        ]
    },
    {
        "id": "b9553a1cdb5e15c9",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "2a4cd8866b4b9d18",
        "name": "Define Statement (DROP TABLE)",
        "func": "const dataspace = env.get('FIWARE_SERVICE');\n\nmsg.payload = { statements: [] };\nmsg.payload.statements[0] = `DROP TABLE IF EXISTS postgrest_${dataspace}.etairqualityobserved`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "17bf151937c6a8f3"
            ]
        ]
    },
    {
        "id": "58771ea04a2073e4",
        "type": "inject",
        "z": "77c0c8f18654550c",
        "g": "2a4cd8866b4b9d18",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "013fc7de7925c10e",
                "b9553a1cdb5e15c9"
            ]
        ]
    },
    {
        "id": "013fc7de7925c10e",
        "type": "delay",
        "z": "77c0c8f18654550c",
        "g": "2a4cd8866b4b9d18",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 440,
        "wires": [
            [
                "3ed39dfea1bcec72"
            ]
        ]
    },
    {
        "id": "b70fda7c2d04bd57",
        "type": "delay",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 460,
        "wires": [
            [
                "1630bf7f0a2f22d0",
                "1011bc6efbacb0c7"
            ]
        ]
    },
    {
        "id": "1011bc6efbacb0c7",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 460,
        "wires": []
    },
    {
        "id": "1630bf7f0a2f22d0",
        "type": "http request",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "1d3623bc18a517d0"
            ]
        ]
    },
    {
        "id": "1d3623bc18a517d0",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "dc11a833da7816df",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "1fde0f9ee4fd3c20",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "Define Statements (CREATE SCHEMA)",
        "func": "const dataspace = env.get('FIWARE_SERVICE');\n\nmsg.payload = { statements: [] };\nmsg.payload.statements[0] = `CREATE SCHEMA IF NOT EXISTS postgrest_${dataspace}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "de835ae4058ab6a1"
            ]
        ]
    },
    {
        "id": "de835ae4058ab6a1",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/execute_many`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 100,
        "wires": [
            [
                "4cc9d380ca29a365",
                "8427e22217ba2f7f"
            ]
        ]
    },
    {
        "id": "4cc9d380ca29a365",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "Exec Statement",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 100,
        "wires": []
    },
    {
        "id": "b3bb223d6e2e7259",
        "type": "inject",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "1fde0f9ee4fd3c20"
            ]
        ]
    },
    {
        "id": "096777924f968aaf",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "2425339b1ce6fd27",
        "name": "Define Statement (DROP Schema)",
        "func": "const dataspace = env.get('FIWARE_SERVICE');\n\nmsg.payload = { statements: [] };\nmsg.payload.statements[0] = `DROP SCHEMA IF EXISTS postgrest_${dataspace}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 100,
        "wires": [
            [
                "de835ae4058ab6a1"
            ]
        ]
    },
    {
        "id": "1bc1f6574915af03",
        "type": "inject",
        "z": "77c0c8f18654550c",
        "g": "2425339b1ce6fd27",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "0f96b7915dc9db2f",
                "096777924f968aaf"
            ]
        ]
    },
    {
        "id": "0f96b7915dc9db2f",
        "type": "delay",
        "z": "77c0c8f18654550c",
        "g": "2425339b1ce6fd27",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "1fde0f9ee4fd3c20"
            ]
        ]
    },
    {
        "id": "8427e22217ba2f7f",
        "type": "delay",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 180,
        "wires": [
            [
                "1a5c186f2d287dda",
                "f00ece2082b314b4"
            ]
        ]
    },
    {
        "id": "f00ece2082b314b4",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 180,
        "wires": []
    },
    {
        "id": "1a5c186f2d287dda",
        "type": "http request",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "b4c07bf5a4fd25ae"
            ]
        ]
    },
    {
        "id": "b4c07bf5a4fd25ae",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "2d31311821583692",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "9d67c680606f715a",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "const dataspace = env.get('FIWARE_SERVICE');\n\nmsg.payload = {statements: []};\nmsg.payload.statements[0] = `\nCREATE TABLE postgrest_${dataspace}.etraw_lubw (\n    entity_id text,\n    entity_type text,\n    time_index timestamp with time zone NOT NULL,\n    dateprocessed timestamp with time zone,\n    endzeit timestamp with time zone,\n    startzeit timestamp with time zone,\n    wert double precision,\n    station text,\n    komponente text\n)\n`;\n\nmsg.payload.statements[1] = `SELECT create_hypertable('postgrest_${dataspace}.etraw_lubw', 'time_index')`;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "1ea1dc20f7fdd773"
            ]
        ]
    },
    {
        "id": "1ea1dc20f7fdd773",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/execute_many`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 640,
        "wires": [
            [
                "5bb1780720af18bb",
                "0be5aa34ecfd6ea9"
            ]
        ]
    },
    {
        "id": "5bb1780720af18bb",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "Exec Statement",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 640,
        "wires": []
    },
    {
        "id": "8866113c9d6c473e",
        "type": "inject",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "9d67c680606f715a"
            ]
        ]
    },
    {
        "id": "e1da7cab7996779e",
        "type": "function",
        "z": "77c0c8f18654550c",
        "g": "62b1988c62ee2ac8",
        "name": "Define Statement (DROP TABLE)",
        "func": "const dataspace = env.get('FIWARE_SERVICE');\n\nmsg.payload = { statements: [] };\nmsg.payload.statements[0] = `DROP TABLE IF EXISTS postgrest_${dataspace}.etraw_lubw`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 640,
        "wires": [
            [
                "1ea1dc20f7fdd773"
            ]
        ]
    },
    {
        "id": "67cd6cefa5a1f5cf",
        "type": "inject",
        "z": "77c0c8f18654550c",
        "g": "62b1988c62ee2ac8",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "c2ab6c53b0f8e476",
                "e1da7cab7996779e"
            ]
        ]
    },
    {
        "id": "c2ab6c53b0f8e476",
        "type": "delay",
        "z": "77c0c8f18654550c",
        "g": "62b1988c62ee2ac8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 700,
        "wires": [
            [
                "9d67c680606f715a"
            ]
        ]
    },
    {
        "id": "0be5aa34ecfd6ea9",
        "type": "delay",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 720,
        "wires": [
            [
                "05a1feb1e14906f1",
                "f4ba38c07e4cfacd"
            ]
        ]
    },
    {
        "id": "f4ba38c07e4cfacd",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 720,
        "wires": []
    },
    {
        "id": "05a1feb1e14906f1",
        "type": "http request",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 780,
        "wires": [
            [
                "14227ee915800d1f"
            ]
        ]
    },
    {
        "id": "14227ee915800d1f",
        "type": "debug",
        "z": "77c0c8f18654550c",
        "g": "30400e35053c989e",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1140,
        "y": 780,
        "wires": []
    },
    {
        "id": "0f4f987967cd5ee1",
        "type": "inject",
        "z": "5ef45f84a0404e21",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "FIWARE_SERVICE",
        "payloadType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "0993ad2062d69031"
            ]
        ]
    },
    {
        "id": "0993ad2062d69031",
        "type": "function",
        "z": "5ef45f84a0404e21",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "7fff2e2870ed2234"
            ]
        ]
    },
    {
        "id": "7fff2e2870ed2234",
        "type": "debug",
        "z": "5ef45f84a0404e21",
        "name": "FIWARE_SERVICE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 60,
        "wires": []
    },
    {
        "id": "a7a0b924e88371c1",
        "type": "inject",
        "z": "5ef45f84a0404e21",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "POSTGREST_API_URL",
        "payloadType": "str",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "ba6f6964b310b054"
            ]
        ]
    },
    {
        "id": "ba6f6964b310b054",
        "type": "function",
        "z": "5ef45f84a0404e21",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            [
                "5a1ed329cfd10f13"
            ]
        ]
    },
    {
        "id": "5a1ed329cfd10f13",
        "type": "debug",
        "z": "5ef45f84a0404e21",
        "name": "POSTGREST_API_URL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "42a0eff944838ad0",
        "type": "inject",
        "z": "5ef45f84a0404e21",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LUBW_USER",
        "payloadType": "str",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "48359f3cddfdb7f0"
            ]
        ]
    },
    {
        "id": "48359f3cddfdb7f0",
        "type": "function",
        "z": "5ef45f84a0404e21",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "2610b9a8d58c6f8f"
            ]
        ]
    },
    {
        "id": "2610b9a8d58c6f8f",
        "type": "debug",
        "z": "5ef45f84a0404e21",
        "name": "LUBW_USER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 500,
        "y": 220,
        "wires": []
    },
    {
        "id": "7458d9e5d6d23b5d",
        "type": "inject",
        "z": "5ef45f84a0404e21",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LUBW_PASSWORD",
        "payloadType": "str",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "1ec56e3f3299f0fd"
            ]
        ]
    },
    {
        "id": "1ec56e3f3299f0fd",
        "type": "function",
        "z": "5ef45f84a0404e21",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "417fbc555ba162be"
            ]
        ]
    },
    {
        "id": "417fbc555ba162be",
        "type": "debug",
        "z": "5ef45f84a0404e21",
        "name": "LUBW_PASSWORD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 300,
        "wires": []
    }
]